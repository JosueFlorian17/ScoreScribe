# Generated from C:/Users/Florian/Downloads/InterpreteILP/InterpreteILP/algoritmia.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,190,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,
        1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,29,1,29,1,30,1,30,5,30,158,8,30,10,30,12,30,161,9,30,
        1,31,1,31,5,31,165,8,31,10,31,12,31,168,9,31,1,32,1,32,5,32,172,
        8,32,10,32,12,32,175,9,32,1,32,1,32,1,33,4,33,180,8,33,11,33,12,
        33,181,1,34,4,34,185,8,34,11,34,12,34,186,1,34,1,34,0,0,35,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,
        6,1,0,65,90,3,0,48,57,65,90,97,122,2,0,95,95,97,122,1,0,34,34,1,
        0,48,57,3,0,9,10,13,13,32,32,194,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,74,1,0,0,0,5,77,1,0,0,
        0,7,81,1,0,0,0,9,85,1,0,0,0,11,88,1,0,0,0,13,90,1,0,0,0,15,92,1,
        0,0,0,17,96,1,0,0,0,19,99,1,0,0,0,21,104,1,0,0,0,23,110,1,0,0,0,
        25,112,1,0,0,0,27,114,1,0,0,0,29,116,1,0,0,0,31,119,1,0,0,0,33,122,
        1,0,0,0,35,125,1,0,0,0,37,128,1,0,0,0,39,131,1,0,0,0,41,133,1,0,
        0,0,43,135,1,0,0,0,45,137,1,0,0,0,47,139,1,0,0,0,49,141,1,0,0,0,
        51,143,1,0,0,0,53,145,1,0,0,0,55,147,1,0,0,0,57,149,1,0,0,0,59,151,
        1,0,0,0,61,155,1,0,0,0,63,162,1,0,0,0,65,169,1,0,0,0,67,179,1,0,
        0,0,69,184,1,0,0,0,71,72,5,124,0,0,72,73,5,58,0,0,73,2,1,0,0,0,74,
        75,5,58,0,0,75,76,5,124,0,0,76,4,1,0,0,0,77,78,5,40,0,0,78,79,5,
        58,0,0,79,80,5,41,0,0,80,6,1,0,0,0,81,82,5,60,0,0,82,83,5,63,0,0,
        83,84,5,62,0,0,84,8,1,0,0,0,85,86,5,60,0,0,86,87,5,45,0,0,87,10,
        1,0,0,0,88,89,5,123,0,0,89,12,1,0,0,0,90,91,5,125,0,0,91,14,1,0,
        0,0,92,93,5,60,0,0,93,94,5,119,0,0,94,95,5,62,0,0,95,16,1,0,0,0,
        96,97,5,105,0,0,97,98,5,102,0,0,98,18,1,0,0,0,99,100,5,101,0,0,100,
        101,5,108,0,0,101,102,5,115,0,0,102,103,5,101,0,0,103,20,1,0,0,0,
        104,105,5,119,0,0,105,106,5,104,0,0,106,107,5,105,0,0,107,108,5,
        108,0,0,108,109,5,101,0,0,109,22,1,0,0,0,110,111,5,61,0,0,111,24,
        1,0,0,0,112,113,5,60,0,0,113,26,1,0,0,0,114,115,5,62,0,0,115,28,
        1,0,0,0,116,117,5,60,0,0,117,118,5,61,0,0,118,30,1,0,0,0,119,120,
        5,62,0,0,120,121,5,61,0,0,121,32,1,0,0,0,122,123,5,47,0,0,123,124,
        5,61,0,0,124,34,1,0,0,0,125,126,5,60,0,0,126,127,5,60,0,0,127,36,
        1,0,0,0,128,129,5,56,0,0,129,130,5,60,0,0,130,38,1,0,0,0,131,132,
        5,91,0,0,132,40,1,0,0,0,133,134,5,93,0,0,134,42,1,0,0,0,135,136,
        5,43,0,0,136,44,1,0,0,0,137,138,5,45,0,0,138,46,1,0,0,0,139,140,
        5,35,0,0,140,48,1,0,0,0,141,142,5,42,0,0,142,50,1,0,0,0,143,144,
        5,47,0,0,144,52,1,0,0,0,145,146,5,37,0,0,146,54,1,0,0,0,147,148,
        5,40,0,0,148,56,1,0,0,0,149,150,5,41,0,0,150,58,1,0,0,0,151,152,
        5,35,0,0,152,153,5,35,0,0,153,154,5,35,0,0,154,60,1,0,0,0,155,159,
        7,0,0,0,156,158,7,1,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,
        1,0,0,0,159,160,1,0,0,0,160,62,1,0,0,0,161,159,1,0,0,0,162,166,7,
        2,0,0,163,165,7,1,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,
        0,0,0,166,167,1,0,0,0,167,64,1,0,0,0,168,166,1,0,0,0,169,173,5,34,
        0,0,170,172,8,3,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,
        0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,173,1,0,0,0,176,177,5,34,
        0,0,177,66,1,0,0,0,178,180,7,4,0,0,179,178,1,0,0,0,180,181,1,0,0,
        0,181,179,1,0,0,0,181,182,1,0,0,0,182,68,1,0,0,0,183,185,7,5,0,0,
        184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,
        187,188,1,0,0,0,188,189,6,34,0,0,189,70,1,0,0,0,6,0,159,166,173,
        181,186,1,6,0,0
    ]

class algoritmiaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    ID_CAP = 31
    ID_MIN = 32
    STRING = 33
    INT = 34
    WS = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'|:'", "':|'", "'(:)'", "'<?>'", "'<-'", "'{'", "'}'", "'<w>'", 
            "'if'", "'else'", "'while'", "'='", "'<'", "'>'", "'<='", "'>='", 
            "'/='", "'<<'", "'8<'", "'['", "']'", "'+'", "'-'", "'#'", "'*'", 
            "'/'", "'%'", "'('", "')'", "'###'" ]

    symbolicNames = [ "<INVALID>",
            "ID_CAP", "ID_MIN", "STRING", "INT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "ID_CAP", "ID_MIN", 
                  "STRING", "INT", "WS" ]

    grammarFileName = "algoritmia.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


